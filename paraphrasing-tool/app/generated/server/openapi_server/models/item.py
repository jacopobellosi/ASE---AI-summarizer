from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.choice_interaction import ChoiceInteraction
from openapi_server.models.response_declaration import ResponseDeclaration
from openapi_server import util

from openapi_server.models.choice_interaction import ChoiceInteraction  # noqa: E501
from openapi_server.models.response_declaration import ResponseDeclaration  # noqa: E501

class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier=None, title=None, response_declaration=None, item_body=None):  # noqa: E501
        """Item - a model defined in OpenAPI

        :param identifier: The identifier of this Item.  # noqa: E501
        :type identifier: str
        :param title: The title of this Item.  # noqa: E501
        :type title: str
        :param response_declaration: The response_declaration of this Item.  # noqa: E501
        :type response_declaration: ResponseDeclaration
        :param item_body: The item_body of this Item.  # noqa: E501
        :type item_body: ChoiceInteraction
        """
        self.openapi_types = {
            'identifier': str,
            'title': str,
            'response_declaration': ResponseDeclaration,
            'item_body': ChoiceInteraction
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'title': 'title',
            'response_declaration': 'response_declaration',
            'item_body': 'item_body'
        }

        self._identifier = identifier
        self._title = title
        self._response_declaration = response_declaration
        self._item_body = item_body

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> str:
        """Gets the identifier of this Item.


        :return: The identifier of this Item.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this Item.


        :param identifier: The identifier of this Item.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def title(self) -> str:
        """Gets the title of this Item.


        :return: The title of this Item.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Item.


        :param title: The title of this Item.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def response_declaration(self) -> ResponseDeclaration:
        """Gets the response_declaration of this Item.


        :return: The response_declaration of this Item.
        :rtype: ResponseDeclaration
        """
        return self._response_declaration

    @response_declaration.setter
    def response_declaration(self, response_declaration: ResponseDeclaration):
        """Sets the response_declaration of this Item.


        :param response_declaration: The response_declaration of this Item.
        :type response_declaration: ResponseDeclaration
        """
        if response_declaration is None:
            raise ValueError("Invalid value for `response_declaration`, must not be `None`")  # noqa: E501

        self._response_declaration = response_declaration

    @property
    def item_body(self) -> ChoiceInteraction:
        """Gets the item_body of this Item.


        :return: The item_body of this Item.
        :rtype: ChoiceInteraction
        """
        return self._item_body

    @item_body.setter
    def item_body(self, item_body: ChoiceInteraction):
        """Sets the item_body of this Item.


        :param item_body: The item_body of this Item.
        :type item_body: ChoiceInteraction
        """
        if item_body is None:
            raise ValueError("Invalid value for `item_body`, must not be `None`")  # noqa: E501

        self._item_body = item_body
