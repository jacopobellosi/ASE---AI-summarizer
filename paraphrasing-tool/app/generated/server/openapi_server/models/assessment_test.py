from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_section import AssessmentSection
from openapi_server import util

from openapi_server.models.assessment_section import AssessmentSection  # noqa: E501

class AssessmentTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier=None, title=None, tool_name=None, tool_version=None, sections=None):  # noqa: E501
        """AssessmentTest - a model defined in OpenAPI

        :param identifier: The identifier of this AssessmentTest.  # noqa: E501
        :type identifier: str
        :param title: The title of this AssessmentTest.  # noqa: E501
        :type title: str
        :param tool_name: The tool_name of this AssessmentTest.  # noqa: E501
        :type tool_name: str
        :param tool_version: The tool_version of this AssessmentTest.  # noqa: E501
        :type tool_version: str
        :param sections: The sections of this AssessmentTest.  # noqa: E501
        :type sections: List[AssessmentSection]
        """
        self.openapi_types = {
            'identifier': str,
            'title': str,
            'tool_name': str,
            'tool_version': str,
            'sections': List[AssessmentSection]
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'title': 'title',
            'tool_name': 'tool_name',
            'tool_version': 'tool_version',
            'sections': 'sections'
        }

        self._identifier = identifier
        self._title = title
        self._tool_name = tool_name
        self._tool_version = tool_version
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt) -> 'AssessmentTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssessmentTest of this AssessmentTest.  # noqa: E501
        :rtype: AssessmentTest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> str:
        """Gets the identifier of this AssessmentTest.


        :return: The identifier of this AssessmentTest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this AssessmentTest.


        :param identifier: The identifier of this AssessmentTest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def title(self) -> str:
        """Gets the title of this AssessmentTest.


        :return: The title of this AssessmentTest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this AssessmentTest.


        :param title: The title of this AssessmentTest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def tool_name(self) -> str:
        """Gets the tool_name of this AssessmentTest.


        :return: The tool_name of this AssessmentTest.
        :rtype: str
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name: str):
        """Sets the tool_name of this AssessmentTest.


        :param tool_name: The tool_name of this AssessmentTest.
        :type tool_name: str
        """
        if tool_name is None:
            raise ValueError("Invalid value for `tool_name`, must not be `None`")  # noqa: E501

        self._tool_name = tool_name

    @property
    def tool_version(self) -> str:
        """Gets the tool_version of this AssessmentTest.


        :return: The tool_version of this AssessmentTest.
        :rtype: str
        """
        return self._tool_version

    @tool_version.setter
    def tool_version(self, tool_version: str):
        """Sets the tool_version of this AssessmentTest.


        :param tool_version: The tool_version of this AssessmentTest.
        :type tool_version: str
        """
        if tool_version is None:
            raise ValueError("Invalid value for `tool_version`, must not be `None`")  # noqa: E501

        self._tool_version = tool_version

    @property
    def sections(self) -> List[AssessmentSection]:
        """Gets the sections of this AssessmentTest.


        :return: The sections of this AssessmentTest.
        :rtype: List[AssessmentSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections: List[AssessmentSection]):
        """Sets the sections of this AssessmentTest.


        :param sections: The sections of this AssessmentTest.
        :type sections: List[AssessmentSection]
        """
        if sections is None:
            raise ValueError("Invalid value for `sections`, must not be `None`")  # noqa: E501

        self._sections = sections
