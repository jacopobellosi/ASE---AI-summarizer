from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.simple_choice import SimpleChoice
from openapi_server import util

from openapi_server.models.simple_choice import SimpleChoice  # noqa: E501

class ChoiceInteraction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, response_identifier=None, shuffle=None, max_choices=None, prompt=None, choices=None):  # noqa: E501
        """ChoiceInteraction - a model defined in OpenAPI

        :param response_identifier: The response_identifier of this ChoiceInteraction.  # noqa: E501
        :type response_identifier: str
        :param shuffle: The shuffle of this ChoiceInteraction.  # noqa: E501
        :type shuffle: bool
        :param max_choices: The max_choices of this ChoiceInteraction.  # noqa: E501
        :type max_choices: int
        :param prompt: The prompt of this ChoiceInteraction.  # noqa: E501
        :type prompt: str
        :param choices: The choices of this ChoiceInteraction.  # noqa: E501
        :type choices: List[SimpleChoice]
        """
        self.openapi_types = {
            'response_identifier': str,
            'shuffle': bool,
            'max_choices': int,
            'prompt': str,
            'choices': List[SimpleChoice]
        }

        self.attribute_map = {
            'response_identifier': 'response_identifier',
            'shuffle': 'shuffle',
            'max_choices': 'max_choices',
            'prompt': 'prompt',
            'choices': 'choices'
        }

        self._response_identifier = response_identifier
        self._shuffle = shuffle
        self._max_choices = max_choices
        self._prompt = prompt
        self._choices = choices

    @classmethod
    def from_dict(cls, dikt) -> 'ChoiceInteraction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChoiceInteraction of this ChoiceInteraction.  # noqa: E501
        :rtype: ChoiceInteraction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def response_identifier(self) -> str:
        """Gets the response_identifier of this ChoiceInteraction.


        :return: The response_identifier of this ChoiceInteraction.
        :rtype: str
        """
        return self._response_identifier

    @response_identifier.setter
    def response_identifier(self, response_identifier: str):
        """Sets the response_identifier of this ChoiceInteraction.


        :param response_identifier: The response_identifier of this ChoiceInteraction.
        :type response_identifier: str
        """
        if response_identifier is None:
            raise ValueError("Invalid value for `response_identifier`, must not be `None`")  # noqa: E501

        self._response_identifier = response_identifier

    @property
    def shuffle(self) -> bool:
        """Gets the shuffle of this ChoiceInteraction.


        :return: The shuffle of this ChoiceInteraction.
        :rtype: bool
        """
        return self._shuffle

    @shuffle.setter
    def shuffle(self, shuffle: bool):
        """Sets the shuffle of this ChoiceInteraction.


        :param shuffle: The shuffle of this ChoiceInteraction.
        :type shuffle: bool
        """
        if shuffle is None:
            raise ValueError("Invalid value for `shuffle`, must not be `None`")  # noqa: E501

        self._shuffle = shuffle

    @property
    def max_choices(self) -> int:
        """Gets the max_choices of this ChoiceInteraction.


        :return: The max_choices of this ChoiceInteraction.
        :rtype: int
        """
        return self._max_choices

    @max_choices.setter
    def max_choices(self, max_choices: int):
        """Sets the max_choices of this ChoiceInteraction.


        :param max_choices: The max_choices of this ChoiceInteraction.
        :type max_choices: int
        """
        if max_choices is None:
            raise ValueError("Invalid value for `max_choices`, must not be `None`")  # noqa: E501

        self._max_choices = max_choices

    @property
    def prompt(self) -> str:
        """Gets the prompt of this ChoiceInteraction.


        :return: The prompt of this ChoiceInteraction.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt: str):
        """Sets the prompt of this ChoiceInteraction.


        :param prompt: The prompt of this ChoiceInteraction.
        :type prompt: str
        """
        if prompt is None:
            raise ValueError("Invalid value for `prompt`, must not be `None`")  # noqa: E501

        self._prompt = prompt

    @property
    def choices(self) -> List[SimpleChoice]:
        """Gets the choices of this ChoiceInteraction.


        :return: The choices of this ChoiceInteraction.
        :rtype: List[SimpleChoice]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: List[SimpleChoice]):
        """Sets the choices of this ChoiceInteraction.


        :param choices: The choices of this ChoiceInteraction.
        :type choices: List[SimpleChoice]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")  # noqa: E501

        self._choices = choices
