from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server import util

from openapi_server.models.item import Item  # noqa: E501

class AssessmentSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier=None, title=None, items=None):  # noqa: E501
        """AssessmentSection - a model defined in OpenAPI

        :param identifier: The identifier of this AssessmentSection.  # noqa: E501
        :type identifier: str
        :param title: The title of this AssessmentSection.  # noqa: E501
        :type title: str
        :param items: The items of this AssessmentSection.  # noqa: E501
        :type items: List[Item]
        """
        self.openapi_types = {
            'identifier': str,
            'title': str,
            'items': List[Item]
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'title': 'title',
            'items': 'items'
        }

        self._identifier = identifier
        self._title = title
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'AssessmentSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssessmentSection of this AssessmentSection.  # noqa: E501
        :rtype: AssessmentSection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> str:
        """Gets the identifier of this AssessmentSection.


        :return: The identifier of this AssessmentSection.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this AssessmentSection.


        :param identifier: The identifier of this AssessmentSection.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def title(self) -> str:
        """Gets the title of this AssessmentSection.


        :return: The title of this AssessmentSection.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this AssessmentSection.


        :param title: The title of this AssessmentSection.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def items(self) -> List[Item]:
        """Gets the items of this AssessmentSection.


        :return: The items of this AssessmentSection.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items: List[Item]):
        """Sets the items of this AssessmentSection.


        :param items: The items of this AssessmentSection.
        :type items: List[Item]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items
