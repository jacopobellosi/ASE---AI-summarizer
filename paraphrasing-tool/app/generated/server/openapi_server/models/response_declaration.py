from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseDeclaration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier=None, cardinality=None, base_type=None, correct_response=None):  # noqa: E501
        """ResponseDeclaration - a model defined in OpenAPI

        :param identifier: The identifier of this ResponseDeclaration.  # noqa: E501
        :type identifier: str
        :param cardinality: The cardinality of this ResponseDeclaration.  # noqa: E501
        :type cardinality: str
        :param base_type: The base_type of this ResponseDeclaration.  # noqa: E501
        :type base_type: str
        :param correct_response: The correct_response of this ResponseDeclaration.  # noqa: E501
        :type correct_response: List[str]
        """
        self.openapi_types = {
            'identifier': str,
            'cardinality': str,
            'base_type': str,
            'correct_response': List[str]
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'cardinality': 'cardinality',
            'base_type': 'base_type',
            'correct_response': 'correct_response'
        }

        self._identifier = identifier
        self._cardinality = cardinality
        self._base_type = base_type
        self._correct_response = correct_response

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseDeclaration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseDeclaration of this ResponseDeclaration.  # noqa: E501
        :rtype: ResponseDeclaration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> str:
        """Gets the identifier of this ResponseDeclaration.


        :return: The identifier of this ResponseDeclaration.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this ResponseDeclaration.


        :param identifier: The identifier of this ResponseDeclaration.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def cardinality(self) -> str:
        """Gets the cardinality of this ResponseDeclaration.


        :return: The cardinality of this ResponseDeclaration.
        :rtype: str
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality: str):
        """Sets the cardinality of this ResponseDeclaration.


        :param cardinality: The cardinality of this ResponseDeclaration.
        :type cardinality: str
        """
        if cardinality is None:
            raise ValueError("Invalid value for `cardinality`, must not be `None`")  # noqa: E501

        self._cardinality = cardinality

    @property
    def base_type(self) -> str:
        """Gets the base_type of this ResponseDeclaration.


        :return: The base_type of this ResponseDeclaration.
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type: str):
        """Sets the base_type of this ResponseDeclaration.


        :param base_type: The base_type of this ResponseDeclaration.
        :type base_type: str
        """
        if base_type is None:
            raise ValueError("Invalid value for `base_type`, must not be `None`")  # noqa: E501

        self._base_type = base_type

    @property
    def correct_response(self) -> List[str]:
        """Gets the correct_response of this ResponseDeclaration.


        :return: The correct_response of this ResponseDeclaration.
        :rtype: List[str]
        """
        return self._correct_response

    @correct_response.setter
    def correct_response(self, correct_response: List[str]):
        """Sets the correct_response of this ResponseDeclaration.


        :param correct_response: The correct_response of this ResponseDeclaration.
        :type correct_response: List[str]
        """
        if correct_response is None:
            raise ValueError("Invalid value for `correct_response`, must not be `None`")  # noqa: E501

        self._correct_response = correct_response
